classmates=['yangbo','linda','wenjie']#list有序列表
print(classmates)
print('len=',len(classmates))
print(classmates[0])
print(classmates[2])
print(classmates[-1])#表示倒数第一个
classmates.append("bobo")#末尾插入一个元素
print(classmates)
classmates.insert(1,"duhui")#指定位置插入一个元素
print(classmates)
classmates.pop(1)#删除指定位置的元素,索引位置从0开始
print(classmates)
classmates[1]="wangyan"#把指定位置的元素替换掉
print(classmates)
L=['apple',123,True]#list有序列表中元素的数据类型可以不一样
print(L)
s=['python','java',['asp','php'],'vb']#list也可以是另一个list的元素
print(s)
print('s\'len=',len(s))
p=['asp','php']
w=['python','c++',p,'vb']
print(w)
print(w[2][1])#要输出'php',可以将w看成一个二维数组
q=[]
print('q\'len=',len(q))#空list表的长度为0
#python的另一种有序序列，元组:tuple.tuple和list非常相似，但是tuple一旦初始化就不能修改了
classmates=('bobo','dada','duhui')#classmates现在是tuple了，由于不能修改元素，所以没有append()和insert()了
#tuple的陷阱，当定义一个tuple时，tuple的元素必须被确定下来
t=(1,2,4)
print(t)
t=()#定义一个空的tuple
print(t)
#但是定义一个只有1个元素的tuple，如果这么定义：
t=(1)
print(t)#定义的不是tuple，是1这个数。因为括号()既可以表示tuple，又可以表示数学公式中的小括号，因此产生歧义，python规定按小括号计算
#加一个逗号来消除歧义
t=(1,)
print(t)

t=('a','b',['A','B'])
print(t[2][0])
print(t[2][1])
t[2][0]="X"
t[2][1]="Y"
print(t)